https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1/Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20-%20Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1.ipynb

pythonanywhere

https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1/Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20%C3%87%C3%B6z%C3%BCmleri%20-%20Temel%20Python%20Objeleri%20ve%20Veri%20Yap%C4%B1lar%C4%B1.ipynb

https://www.yazilimbilimi.org/python-mantiksal-baglaclar/


https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/Ko%C5%9Fullu%20Durumlar/Ko%C5%9Fullu%20Durumlar%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20%20-%20Ko%C5%9Fullu%20Durumlar.ipynb

https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/Ko%C5%9Fullu%20Durumlar/Ko%C5%9Fullu%20Durumlar%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20%C3%87%C3%B6z%C3%BCmleri%20-%20Ko%C5%9Fullu%20Durumlar.ipynb

https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/D%C3%B6ng%C3%BCler/D%C3%B6ng%C3%BCler%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20-%20%20D%C3%B6ng%C3%BCler.ipynb

https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/D%C3%B6ng%C3%BCler/D%C3%B6ng%C3%BCler%20-%20%C3%96dev%20ve%20%C3%87%C3%B6z%C3%BCmleri/Programlama%20%C3%96devi%20%C3%87%C3%B6z%C3%BCmleri%20-%20%20D%C3%B6ng%C3%BCler.ipynb

--opencv indirmek
Pip install opencv

--web botu yazmak için
requests, beautifulsoup, Mechanize

pascal üçgeni
https://paste.ubuntu.com/p/z82TXp6y9Q/?fbclid=IwAR0t5QT4pT6OKkJmaIQf85XE76Ydp8DyOf6AcDmZKkBIL5T-4KaWUqpgB-4

--pyaudio
https://sharewebegin.blogspot.com/2013/06/real-time-voice-chat-example-in-python.html?fbclid=IwAR1b8ruaW7Ugd0qKNHkXVQ7wP_Mx3aB8TSvHX8umbiyFX7mMo_kMy13hrEg

--resim üzerinden text okuma
Tesseract
https://medium.com/@ibrahimirdem/tesseract-ile-yaz%C4%B1-karakteri-tan%C4%B1ma-python-8ca5e746951?fbclid=IwAR2p3MCObXSudX3FT6hCsUDA4nYb1iHrUnORXTRqlrRXYgvTpYVLg15yHeQ

--klavyeden basılan tuşları öğrenmek
pygame

ücretsiz sanal pos kullanmak için
Iyzico
https://www.paytr.com/

yüz tanıma
https://github.com/ageitgey/face_recognition?fbclid=IwAR0PwyhGY-Y6BMxY21V8_yiqsuOhPfO64A3K0qXbRnf2ChEl5sxhB52l5gI

--pyqt5 dersleri
https://www.youtube.com/playlist?list=PLOl6SW8nLgJx9guRvfylVwrMXIginZhin&fbclid=IwAR1yYGwAKeXOqk70oYL4eqQXnLsOyk6ie5oDdWKWn5K70ZoR7oRUFALYobw


--random tahmin
https://paste.ubuntu.com/p/t4pMbZsZnt/?fbclid=IwAR28b5DYciQrMFt18XlOKvZz1aJ2tFqQ4CHBpT1IosigrbLwdIU7KLISogw

--elektronik
pigpio

--girilen sayıların adını yazan program
https://paste.ubuntu.com/p/sKgN7NcmX5/?fbclid=IwAR0-Sh1EoSGZLZ4i9RM8ohPrdQ6bACPl-3-8f9wnsuqKRY5HDLY9Zyw2cnY

android geliştirmek için
kivy, Flutter

--SQL sorgusu çalıştırmak
https://docs.djangoproject.com/en/2.1/topics/db/sql/?fbclid=IwAR2SMtE93dJ_lGxZuETdlekMkbvZw5ZX8qEWvat3cMq2oLmEsyfSrXvwYE0

--text to speech
https://www.coogger.com/@hakancelik/pyttsx-kullanm/

--DJANGO
https://www.coogger.com/@hakancelik/ozel-yonetim-komutlar-nasl-yaplr/?fbclid=IwAR3RwZzJKqEZeu8EB-8BXRZrv6AsAcji9h72wZQc3kTZEGGuKeCiOmQKDvU

--mysql için
mysql-connector-python

--bir metodun ne iş yaptığını öğrenmek
>>help(a.append)
>>help(liste.insert)

--makina öğrenmesi(PyTorch)
https://www.youtube.com/watch?v=Y1a_uzYHVps&list=PLRRY18KNZTgWqNVa5SeqUi7r925NjXTJn&fbclid=IwAR1IguOUbMHU7iHw9dMc2fnwdvU3txpFx8JBzVYtT9O_hAnm1fpuAFGiZIE

--basit bir fonksiyon tanımlama
def selamla()
	print("merhaba")
	print("nasılsın")
>>type(selamla)  --selamla nın tipinin ne olduğu
function

>>selamla() -- bu şekide fonksiyon çağırılıyor

--resmin boyutunu değiştirmek için
opencv -- resize fonksiyonu kullanm/

--touchscreen modulu
python canvas paint

python object orianted
https://github.com/ets-labs/python-dependency-injector?fbclid=IwAR10SNaPCcXvWZTBv_b6maQj37L1XHI5zYxL15adlbN67G6yDRO7CFN2FU0

python class miras alma
https://paste.ubuntu.com/p/yd9Px59pHD/?fbclid=IwAR1efCYEdn-h99ynDqetDBlLlRbNAp5JLKvlV6sMsug-MAHpKKqqWAyBc3E

executebla yapmak
pyinstaller x.py

web scraping ve crawling
https://www.udemy.com/scrapy-tutorial-web-scraping-with-python/?fbclid=%5B%27IwAR0vFXXqkoJK25UntmZgOFCTxsOZhbstbAhr4E3C3NNvN2V3kXjj283muvk%27%5D

django oylama yapma modülü
django-vote

sqlite örnek
https://paste.ubuntu.com/p/tBzGPPkPwr/?fbclid=IwAR1BGLIgiSCOJS1-8s88x9Kv8xP1o8EW47W6p57BolScDjikqHG-K-3O3fo

Ödev
https://nbviewer.jupyter.org/github/mustafamuratcoskun/Sifirdan-Ileri-Seviyeye-Python-Programlama/blob/master/Mod%C3%BCller/Programlama%20%C3%96devi%20%20-%20%20Mod%C3%BCller.ipynb

ssh root@104.248.188.200
https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-database-to-optimize-site-performance-with-mysql-on-ubuntu-16-04#step-2-%E2%80%94-configuring-mysql-to-listen-for-remote-connections
http://www.mysqltutorial.org/mysql-create-table/
https://flask-mysql.readthedocs.io/en/latest/

http://flask.pocoo.org/docs/0.12/patterns/wtforms/

pip install flask-mysqldb  --mysqle bağlanmak için
pip install flask-WTF  --hazır form kontrolleri.text,string,password fieelds,formlar
pip install passlib -- parolalarımızı şifrelemek için bir paket

mysql> show databases;
mysql> CREATE DATABASE OnBlog CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE TABLE IF NOT EXISTS tasks (
    task_id INT AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    start_date DATE,
    due_date DATE,
    status TINYINT NOT NULL,
    priority TINYINT NOT NULL,
    description TEXT,
    PRIMARY KEY (task_id)
)  ENGINE=INNODB;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT,
    name TEXT NOT NULL,
    email TEXT,
    username TEXT,
    password TEXT,
    PRIMARY KEY (id)
)  ENGINE=INNODB;

http dos ile ilgili bir makale
https://www.mertsarica.com/dos-ile-mucadele/

mysql> set profiling=1;
mysql> show profiles;

digitalocean aşağıdaki şekilde çözdüm.
sudo ps wwaux | grep -i sql
sudo service mysql restart
sudo netstat -plutn | grep -i sql
GRANT ALL ON OnBlog.* TO root@95.10.150.78 IDENTIFIED BY 'Onsel123_'; 
requiresecuretransport = on
https://www.digitalocean.com/community/questions/warning-mysqli_real_connect-hy000-3159-connections-using-insecure-transport-are-prohibited-while-require_secure_transport-on

insert into users(name, email, username, password) VALUES ("Onsel AYDIN","onselaydin@gmail.com", "oncell", "1234")

---flask flashing
http://flask.pocoo.org/docs/0.12/patterns/flashing/


CK Editoru
https://cdn.ckeditor.com/

flask ORM için SqlAlchemy
http://flask-sqlalchemy.pocoo.org/2.3/


https://www.djangoproject.com/

pip install django==2.0.3 -- istenilen versiyonda paket kurmak.
>django-admin --version djangonun sürümü

--proje oluşturmak (örnek: blog)
proje klasörüne git ve > django-admin startproject blog
http://localhost:8000 projeyi test etmek için kullanılır.
--Bu uygulamanın alt uygulamasını açmak için 
>python manage.py startapp article
--özelleştirme dökümanı
https://docs.djangoproject.com/en/2.0/ref/contrib/admin/


https://nathanhoad.net/how-to-git-cancel-merge/

Html içinde kod renklendirmek
https://github.com/google/code-prettify

jango filtreleri
https://docs.djangoproject.com/en/2.0/ref/templates/builtins/

order,filter vs...
https://docs.djangoproject.com/en/2.0/ref/models/options/

deploy django
# rm -rf klasor

https://help.pythonanywhere.com/pages/DeployExistingDjangoProject/
https://github.com/mustafamuratcoskun/django-blog-app

pratik if kullanım örnekleri
örnek:
my_string = "Hello World"
if "Hello" in my_string
    print("true")
else:
    print("false")

örnek:
my_dictionery = {"k1":100,"k2":200,"k3":300 }
if 100 in my_dictionery.key():
    print("true")
else
    pring("false")

Enumerate #listenin index numarasını veriyor.
for (index,number) in Enumerate(list(range(5,15))):
    print(index)
    print(number)

#---------pratik fonksiyonlar
def orner_fonsiyon(*args)
    return args
orden_fonksiyon("a","b","c","d")

def ornek_func(**kwargs)
    print(kwargs)

ornek_func(yas=40,maas=5000,ad=onsel)

def divide(number):
    return number / 2

my_list = [1,2,3,4,5,6,7,8]
list(map(divide, my_list))

#----filter
list = ["Ali","veli","hasan","Aliye"]
def kontrol(kelime):
    return "Ali" in string

list(filter(kontrol,list))
sonuç olarak ali ve aliye gelir.




#-----------------calendar
import calendar
cal=calendar.TextCalendar()
print(cal.formatmonth(2019,4))

#---------------numpy
import numpy as np

first_arr = np.array([1, 2, 3, 4])
print(first_arr)

second_array = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(second_array)

print("------------- Print Array Element - arr[x,y]-------------")
print("my_arr [1,2] : " + str(second_array[1, 2]))
print("------------- Print Array Rank - arr.ndim -------------")
print("Array Rank : " + str(second_array.ndim))

print("------------- Print Array Rows & Column - arr.shape -------------")
print("Array Row:Columns : %s %s" % second_array.shape)

print("------------- Print Array Size (Rows * Column) - arr.size -------------")
print("Array Size : " + str(second_array.size))

print("------------- Print Type of Array - type(arr) -------------")
print("Array Type : " + str(type(second_array)))

print("------------- Print Array with value 1 only - np.ones((x,y)) -------------")
arr_of_ones = np.ones((3, 2))
print(arr_of_ones)

print("------------- Print Array with value 0 only - np.zeroes((x,y)) -------------")
arr_of_zeros = np.zeros((3, 3))
print(arr_of_zeros)

print("------------- Print Array with random values np.random.random(x) -------------")
arr_of_random = np.random.random(5)
print(arr_of_random)

print("------------- Print Array with value constant value - np.full((x,y), z) -------------")
arr_of_constant = np.full((3, 3), 3)
print(arr_of_constant)

print("------------- Print Array empty array (with zeroes) - np.empty((x,y)) -------------")
empty_array = np.empty((3, 3))
print(empty_array)

print("------------- Print Array with Diagonal values -------------")
arr_with_diag = np.eye(5) * np.random.random(5)
print(arr_with_diag)

print("------------- Print Array as identity matrix -------------")
num_identity = np.identity(4)
print(num_identity)

print("------------- Print Array Copy -------------")
copy_of_first_array = first_arr.copy()
print(copy_of_first_array)

print("------------- Print Array with values in Range -------------")
arr_with_two_step = np.arange(0, 10, 2)
print(arr_with_two_step)

print("------------- Print Array with values in Range -------------")
arr_with_range = np.arange(10)
print(arr_with_range)

print("------------- Print Array with similar space range -------------")
arr_with_linspace = np.linspace(0, 100, 7)
print(arr_with_linspace)

arr_with_range2 = np.arange(10)
print(arr_with_range2.shape)
print(arr_with_range2)

print("------------- Print Array with resizing rows & columns -------------")
arr_with_range2.resize(4, 5)
print(arr_with_range2.shape)
print(arr_with_range2)

two_d_array = np.array([[1, 2, 3], [4, 8, 9]])

print("------------- Print Array with reshape the rows and columns -------------")
print(two_d_array.reshape(3, 2))

print("------------- Print Array in single dimension -------------")
print(two_d_array.ravel())

print("------------- Print Array in as transpose matrix -------------")
print(two_d_array.transpose())

#-----------------------------
args example
def topla(*args):
    return sum(args)
örnek
def topla(*rakam)
    return sum(rakam)
#-------------------------- mors converter
ime = input("Input the text to convert to morse: \n\n")
lngth = len(ime)
l = ""

print("You wrote: " + ime)
for x in range(0, lngth):
    c = ime[x]
    c = c.upper()
    if (c == "A"):
        print(".- | a\n")
    elif (c == "B"):
        print("-... | b\n")
    elif (c == "C"):
        print(" -.-. | c\n")
    elif (c == "D"):
        print("-.. | d\n")
    elif (c == "E"):
        print(". | e\n")
    elif (c == "F"):
        print("..-. | f\n")
    elif (c == "G"):
        print("--. | g\n")
    elif (c == "H"):
        print(".... | h\n")
    elif (c == "I"):
        print(".. | i\n")
    elif (c == "J"):
        print(".--- | j\n")
    elif (c == "K"):
        print("-.- | k\n")
    elif (c == "L"):
        print(".-.. | l\n")
    elif (c == "M"):
        print("-- | m\n")
    elif (c == "N"):
        print("-. | n\n")
    elif (c == "O"):
        print("--- | o\n")
    elif (c == "P"):
        print(".--. | p\n")
    elif (c == "Q"):
        print(" --.- | q\n")
    elif (c == "R"):
        print(".-. | r\n")
    elif (c == "S"):
        print("... | s\n")
    elif (c == "T"):
        print("- | t\n")
    elif (c == "U"):
        print("..- | u\n")
    elif (c == "V"):
        print("...- | v\n")
    elif (c == "W"):
        print(".-- | w\n")
    elif (c == "X"):
        print("-..- | x\n")
    elif (c == "Y"):
        print("-.-- | y\n")
    elif (c == "Z"):
        print("--.. | z\n")
    elif (c == " "):
        print("\n\n")
    elif (c == "!"):
        print("Not existing/translatable in morse code. | !\n")
    elif (c == "?"):
        print("..--.. | ?\n")
    elif (c == "@"):
        print(".--.-. | @\n")
    elif (c == "/"):
        print("-..-. | /\n")
    elif (c == "."):
        print(".-.-.- | .\n")
    elif (c == ","):
        print("--..-- | ,\n")
    elif (c == "1"):
        print(".---- | 1\n")
    elif (c == "2"):
        print("..--- | 2\n")
    elif (c == "3"):
        print("...-- | 3\n")
    elif (c == "4"):
        print("....- | 4\n")
    elif (c == "5"):
        print("..... | 5\n")
    elif (c == "6"):
        print("-.... | 6\n")
    elif (c == "7"):
        print("--... | 7\n")
    elif (c == "8"):
        print("---.. | 8\n")
    elif (c == "9"):
        print("----. | 9\n")
    elif (c == "0"):
        print("----- | 0\n")


#-- number led converter
try:
    s = int(input().strip())
    assert 0 <= s <= 9999999999
except (ValueError, AssertionError):
    s = 1234567890

p_num = {
0: ' _ | ||_|',
1: '     |  |',
2: ' _  _||_ ',
3: ' _  _| _|',
4: '   |_|  |',
5: ' _ |_  _|',
6: ' _ |_ |_|',
7: ' _   |  |',
8: ' _ |_||_|',
9: ' _ |_| _|',
}

for i in range(3):
    for n in str(s):
        print(p_num[int(n)][i*3:i*3+3], end = '')
    print()
-----------------
print(*list(((chr(176 + bool(j & 2**(25-i)) * 43)+(i//25)*'\n') for j in [0,16267488,2129392,2129904,2129904,2113504,2105280,2101120,2098944,16253440,0,3966448,4375808,4384000,4371936,4365568,4361472,3966448,0,18135948,18260560,18199436,18129538,30718556,0,0] for i in range(26))), sep='')

----------------
#-----google api
from urllib.request import urlopen as OPEN
from urllib.parse import urlencode as ENCODE
from xml.etree import ElementTree as XML
# importing only the necessary for memory saving

api_url = 'http://maps.googleapis.com/maps/api/geocode/xml?'
# the location of Google's geolocation API

address = input('Enter location: ')
if len(address) < 1:
    address = "Warsaw, Poland"
    # if no address specified, try my home city :)
url = api_url + ENCODE({'sensor': 'false', 'address': address})
# putting the parts together in UTF-8 format
print ('\nRetrieving location for:', address)
data = OPEN(url).read()
# getting that data
# print ('Retrieved',len(data),'characters')
tree = XML.fromstring(data)
# digging into the XML tree

res = tree.findall('result')
# let's see the results now

lat = res[0].find('geometry').find('location').find('lat').text
# dig into the XML tree to find 'latitude'
lng = res[0].find('geometry').find('location').find('lng').text
# and longitude
lat = float(lat)
lng = float(lng)
if lat < 0:
    lat_c = chr(167)+'S'
else:
    lat_c = chr(167)+'N'
if lng < 0:
    lng_c = chr(167)+'W'
else:
    lng_c = chr(167)+'E'
# format the coordinates to a more appealing form

location = res[0].find('formatted_address').text
location_type = res[0].find('geometry').find('location_type').text
# location holds the geomap unit found by API, based on user input
place_id = res[0].find('place_id').text


# Time for the second part...
url = 'http://maps.googleapis.com/maps/api/place/details/xml?'
# the location of Google Places API
# will need a valid key for that 
# url = api_url + ENCODE({'placeid': place_id, 'key': ''})

data = OPEN(url).read()
tree = XML.fromstring(data)
res = tree.findall('status')[0].text
# rating = res[0].find('rating').text

print("\n==>", location, "<==")
print('Latitude: {0:.3f}{1}'.format(abs(lat), lat_c))
print('Longitude: {0:.3f}{1}'.format(abs(lng), lng_c))
print('Location type:', location_type)
print('Place ID:', place_id)
print('Rating:', res) # REQUEST_DENIED so far...

#-------------------random password generator
import random, re, string

def validate(password):
  # check if password contains:
  # a letter..
  letter = re.search(r"[a-zA-Z]",
    password) is None
  # a digit..
  digit = re.search(r"\d", password) is None
  # a symbol..
  symbol = re.search(r"\W", password) is None
  # the blood of a virgin... ok, no.  
  return not(letter or digit or symbol)


def random_password(length):
  charset = (
    string.ascii_letters
    + string.digits
    + string.punctuation
  )
  return ''.join((
    random.choice(charset)
      for ch in range(length)
  ))


def main():
  try:
    # Enter the length of your password
    passwd_len = int(input())
  except ValueError:
    print("Please enter a number!")
    return 1
        
  if passwd_len >= 3 and passwd_len <= 100:
    password = ""
    while not validate(password):
      password = random_password(passwd_len)
    print("Your shiny brand new password:")
    print("-"*30)
    print(password)
        
  else:
    print("Please enter a number between 3 and 100.")


if __name__ == "__main__":
    main()

#----------------number to Word
helper = {
        0: '',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine',
        10: 'ten',
        11: 'eleven',
        12: 'twelve',
        13: 'thirteen',
        14: 'fourteen',
        15: 'fifteen',
        16: 'sixteen',
        17: 'seventeen',
        18: 'eighteen',
        19: 'nineteen',
        20: 'twenty',
        30: 'thirty',
        40: 'fourty',
        50: 'fifty',
        60: 'sixty',
        70: 'seventy',
        80: 'eighty',
        90: 'ninety',
        100: 'hundred',
        1000: 'thousand'
}

def word(num):
    global helper
    if num < 1:
        return
        
    # Count digits
    p = len(str(num))
    if p % 3 == 0:
        # Hundred
        word(num // 100)
        print(helper[100], end=' ')
        word(num % 100)
    elif p < 3:
        if num in helper:
            print(helper[num], end=' ')
        else:
            print(helper[num // 10 * 10], end=' ')
            print(helper[num % 10], end=' ')
    else:
        # Thousand
        word(num // 1000)
        print(helper[1000], end=' ')
        word(num % 1000)


MAX = 99999

num = int(input())
if num > MAX or num < -MAX:
    print("Number out of limits, retry")
elif num == 0:
    print("Zero")
elif num < 0:
    print("Minus ", end='')
    word(-num)
    print()
else:
    word(num)
    print()
#----------------send email
import smtplib

sender = "my_email@gmail.com"
receiver = "your_email@your_server.com"
password = "my_password"
message = "Subject:my_subject\nmy_message"

with smtplib.SMTP("smtp.gmail.com", 587) as smtpserver:
    smtpserver.ehlo()
    smtpserver.starttls()
    smtpserver.ehlo()
    smtpserver.login(sender, password)
    smtpserver.sendmail(sender, recipient, message)
    
print("Send was successful.")

#-------------------------number to roman
rom_num = [(1000,'M'),(900,'CM'),(500,'D'),(400,'CD'),(100,'C'),(90,'XC'),(50,'L'),(40,'XL'),(10,'X'),(9,'IX'),(5,'V'),(4,'IV'),(1,'I')]

def num_to_roman(number):
    roman=''
    while number > 0:
        for i,j in rom_num:
            while number >= i:
                roman += j
                number -= i
    return roman
    
number = int(input("Enter any number :"))
print(number)
#x = num_to_roman(number)
print("Roman number of", number , "is :",num_to_roman(number))

#----mors alfabesi
CODE = {'A': '.-',     'B': '-...',   'C': '-.-.', 
        'D': '-..',    'E': '.',      'F': '..-.',
        'G': '--.',    'H': '....',   'I': '..',
        'J': '.---',   'K': '-.-',    'L': '.-..',
        'M': '--',     'N': '-.',     'O': '---',
        'P': '.--.',   'Q': '--.-',   'R': '.-.',
        'S': '...',    'T': '-',      'U': '..-',
        'V': '...-',   'W': '.--',    'X': '-..-',
        'Y': '-.--',   'Z': '--..',
        
        '0': '-----',  '1': '.----',  '2': '..---',
        '3': '...--',  '4': '....-',  '5': '.....',
        '6': '-....',  '7': '--...',  '8': '---..',
        '9': '----.',  '.': '.-.-.-', ',': '--..--',
        '!': '–·–·––', '?': '..--..', ' ': '/'
        }


def main():
    
    msg = input('MESSAGE: ')
    
    for char in msg:
        print (CODE[char.upper()])
        
if __name__ == "__main__":
    main()

#---------OOP in py
#Class
class As:
    #Constructor
    def __init__ (self, a , b, c):
        self.name = a
        self.color = b
        self.pet = c
    #Function/Method
    def introduce (self):
        print("My name is " + self.name +".")
        print("My color is " + self.color +".")
        print("My pet is " + self.pet +".\n")
#Objects
p1 = As("Nancy", "Fair", "Rabbit")
p2 = As("Emily","Dark","Kitten")
# Method called
p1.introduce ()
p2.introduce ()

#---------------------------bit
a=8191

print('\n'.join(str(bin(i|1<<7))[3:].replace('0','\xb0').replace('1','\xdb')for i in(a&54,a>>5,a&255,a&62,a&28,a&8)))
#-----------------------multithreading
import threading

class SampleThread(threading.Thread):
     def __init__(self, from_var, to_var):
         super(SampleThread, self).__init__()
         self.from_var = from_var
         self.to_var = to_var
         self.res = 0

     def run(self):
         for i in range(self.from_var, self.to_var):
             self.res += i

thread1 = SampleThread(0, 10000)
thread2 = SampleThread(10000, 50000)
thread1.start() 
thread2.start()
# This waits until the thread has complete
thread1.join()
thread2.join()
# At this point, both threads have completed
result = thread1.res + thread2.res
print(result)
#--------------------------------------------sqlite
import sqlite3

connect = sqlite3.connect('peopledb.sqlite') # if in same folder

# connect = sqlite3.connect('/storage/emulated/0/Download/peopledb.sqlite')
# ^^^ this location is default for Android's downloads, use it if you will run this code in qpython3 for Android

cursor = connect.cursor()
# establish a link to the db

def insert(name, age):
    # method to add a new record
    sqlstr = 'INSERT INTO PEOPLE(Name, Age) VALUES ("' + str(name) + '", ' + str(age) + ')'
    cursor.execute(sqlstr)
    connect.commit()

def filter(f):
    # method to filter records based on 'f' statement, see comments below
    sqlstr = 'SELECT * FROM PEOPLE WHERE ' + f + ' ORDER BY Name'
    print ('Database filtered by:', sqlstr, '\n')
    print ('ID', 'Name            ', '    Age')
    print ("-----------------------------")
    for row in cursor.execute(sqlstr):
        print(('{0:{width}}'.format(row[0], width=2)),
              ('{0:{width}}'.format(row[1], width=20)),
              ('{0:{width}}'.format(row[2], width=2)))
    print('-----------------------------\n')

def display_all():
    # method to list all records
    sqlstr = 'SELECT * FROM PEOPLE'
    print ('Showing the whole database')
    print ('ID', 'Name            ', '    Age')
    print ("-----------------------------")
    for row in cursor.execute(sqlstr):
        print(('{0:{width}}'.format(row[0], width=2)),
              ('{0:{width}}'.format(row[1], width=20)),
              ('{0:{width}}'.format(row[2], width=2)))
    print('-----------------------------\n')

filter('Age>25')            # lists all older than 25
filter('Name LIKE "%k%"')   # lists all with a 'k' in Name
display_all()


# n = input("Enter name: ")
# a = input("Enter age: ")
# insert(n, a)
# print("New record added.")
# ^^^ unhash the above to be able to add a new record (Name, Age)

cursor.close()
#----------------satranç
import sys, codecs

sys.stdout = codecs.getwriter('utf_16')(sys.stdout.buffer, 'strict')



queen = chr(9812)
king = chr(9813)
tower=chr(9814)
bishop=chr(9815)
knight=chr(9816)
pawn=chr(9817)

queen_white=chr(9818)
king_white=chr(9819)
tower_white=chr(9820)
bishop_white=chr(9821)
knight_white=chr(9822)
pawn_white=chr(9823)

#table 8x8
a=chr(11035)

bug="|"+a+"  "+a+"  "+a+"  "+a+"  "
error="|  "+a+"  "+a+"  "+a+"  "+a+" "

#Your color is white.
def table_white():
    print("__________________")
    print("|"+tower+" "+knight+" "+bishop+" "+queen+king+" "+bishop+" "+knight+" "+tower)
    print("|"+(pawn+" ")*7+pawn)
    print(bug)
    print(error)
    print(bug)
    print(error)
    print("|"+(pawn_white+" ")*7+pawn_white)
    print("|"+tower_white+" "+knight_white+" "+bishop_white+" "+queen_white+king_white+" "+bishop_white+" "+knight_white+" "+tower_white)
    
     
#Your color is black.    
def table_black():
    print("__________________")
    print("|"+tower_white+" "+knight_white+" "+bishop_white+" "+queen_white+king_white+" "+bishop_white+" "+knight_white+" "+tower_white)
    print("|"+(pawn_white+" ")*7+pawn_white)
    print(error)
    print(bug)
    print(error)
    print(bug)
    print("|"+(pawn+" ")*7+pawn)
    print("|"+tower+" "+knight+" "+bishop+" "+queen+king+" "+bishop+" "+knight+" "+tower)
    
    
#ending.   
table_white()
table_black()
table_white()

#----------------------------
postgrey client
https://github.com/MagicStack/asyncpg


