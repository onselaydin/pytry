https://landscape.cncf.io/zoom=80
https://github.com/BretFisher/udemy-docker-mastery

http://chat.dockermastery.com/

dockermastery.slack.com
https://www.youtube.com/channel/UC0NErq0RhP51iXx64ZmyVfg

https://github.com/matt9ucci/DockerCompletion

Using Prune to Keep Your Docker System Clean (YouTube)
https://www.udemy.com/docker-mastery/learn/v4/t/lecture/7407918?start=0

apt-get install docker.io

https://hub.docker.com/editions/community/docker-ce-server-ubuntu

curl -sSL https://get.docker.com/ | sh

https://hub.docker.com/

--MYSQL Cluster için image--
https://hub.docker.com/r/percona/proxysql
https://hub.docker.com/r/percona/percona-xtradb-cluster 

# docker info
# docker version

https://hub.docker.com/editions/community/docker-ce-desktop-windows
https://desktop.github.com/
https://github.com/BretFisher/udemy-docker-mastery
https://code.visualstudio.com/
https://cmder.net/
https://docs.docker.com/docker-for-windows/faqs/
win7,8,10 home https://docs.docker.com/toolbox/overview/

# docker
# docker pause
# curl -fsSL get.docker.com -o get-docker.sh

# docker image ls -- 

https://www.bretfisher.com/shell/

https://atom.io/

https://spacevim.org/


# docker top mongo

windows contanier
https://www.youtube.com/watch?v=066-9yw8-7c

windows and linux 
https://www.youtube.com/watch?v=4ZY_4OeyJsw

https://www.youtube.com/watch?v=QASAqcuuzgI

# docker container stats

https://github.com/buraka/udemy-docker

--------------------------------------------------------------Kurulum 1.yol
Linux verion öğrenmek
cat /etc/os-release

c:\>docker --version
digitalocean https://www.youtube.com/watch?v=plIeC5Zpp8A

https://hub.docker.com/search/?type=edition&offering=community

#lsb_release -a  //codename önemli
----------------------------------------------------------------Kurulum 2.yol(Bu yöntem ile kuruyoruz...)
https://get.docker.com/
# sudo apt install curl
$ docker version

Kullanımıcı docker grubuna atmayı unutmayalım. Aksi halde sürekli sudo yazmak zorunda kalacağız
örnek $ sudo usermod -aG docker root


----------------------------------------Docker Machine kurulumu
https://docs.docker.com/machine/install-machine/

base=https://github.com/docker/machine/releases/download/v0.16.0 &&
 curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
 sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &&
 chmod +x /usr/local/bin/docker-machine

----------------------------------------Docker Compose Kurulumu
https://docs.docker.com/compose/install/

docker-machine version
docker-compose version
-----------------------------------------
# docker container ls
# docker images

https://desktop.github.com/

https://cmder.net/

https://atom.io/

$ docker info
$ docker
$ docker management-command sub-command [options]
$ docker container run nginx
$ docker <ana komut> <yardımcı sub komut> (parametreler)
image = çalıştırmak istediğimiz uygulama
container = imajları çalıştırdığımız yer
imajları çekeceğimiz yer = hup.docker.com
örnek image nginx

-ilk imajın oluşturulması-
$ docker container run nginx

-uygulamayı dışarı açıyoruz-
$ docker container run --publish 80:80  
$ docker container run -p HOST:CONTAINER
//ilk 80 lokalimizden dışarıya hangi porttan servis vereceğimiz.
//Diğeride dışardan lokalimize hangi hangi porttan geleceği

--YArdım almak--
$ docker container run --help

--çalışan Containerları listelemek--
$ docker container ls
Not: Her conatinera isim vererek oluşturmalıyız ve her container ismi farklı olmalı.

--containerin detach (-d) komutu ile arka planda çalışmasını sağlamak--
$ docker container run -p 80:80 --name webserver -d nginx

------------------------https://www.slideshare.net/bgasecurity/ssh-tnelleme-ile-erik-filtreleyicileri-atlatmak-----------------------
--tüm containerları görmek--
$ docker container ls -a

--Arkada çalışan containerın loglarına bakmak--
$ docker container logs webserver
-- container süreçlerine bakmak--
$ docker container top webserver

--container durdurmak-*
$ docker container ls ile id den yada verdiğimiz isim ile durdurabiliriz.
$ docker container stop webserver

--container silmel için --
id ve isimle yan yana yazarak birden fazla aynı anda silebiliriz.
Çalışan containerı silemezsin
önce tüm containerları listeleyelim $ docker container ls -a
$ docker container rm hardcore_taussig dazzling_nash
çalışanı zorlayıp silmek için -f parametresi kullanılır
$ docker container rm -f blablacontainer
Tüm durmuş containerları silmek için : $ docker container prune

--imajın özel bir versiyonunu kurmak--
$ docker container run --publish 80:80 --name webserver -d nginx:1.13

--ödev nginx,httpd(apache) ve mysql --
$ docker container run -d -p 80:80 --name proxy nginx
$ docker container run -d -p 8080:80 --name webserver httpd
$ docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

--linux .net core 3.0 kurulumu--
https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current

--komut satırından http isteği atmak--
$ curl localhost:8080

--processleri listelemek--
$ docker container top webserver

--istatistikleri görmek--
$ docker container stats

--konfigürasyon bilgileri--ip network bilgilerinide verir.--
$ docker container inspect webserver
$ docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webserver

--yeni container oluşturma ve komut isteminden bağlanmak için--
$ docker container run -it -- name proxy nginx bash
kapalıysa tekrar bağlanmak için $ docker container start -ai proxy

--çalışan bir container içinde bağlanmak için--
$ docker container exec -it proxy bash

--container kapandığında silinmesi--
$ docker container run --rm -it nginx bash

--açık olan portları görmek--
$ docker container port webserver

--containerlar arası iletişim için -p ye ihtiyaç yol--
örneğin:  * frontend -> react + nodejs -> my_frontend_network
          * backend -> apache + mysql -> my_backend_network

https://www.draw.io/

--Docker Network--
$ docker network ls
$ docker network inspect bridge

--yeni network oluşturmak--
$ docker network create bir_isim
$ docker network create --help

--network silmek--
$ docker network rm my_net

--Bağlanmak--
$ docker network connect my_net proxy
$ docker network inspect my_net
--Bağlantıyı kesmek--
$ docker network disconnect bridge proxy


--Containerlar arası haberleşme--
not: ipler ile haberleştirme tavsiye edilmiyor. ipler değişebilir. Bunun yerine domain name ile haberleşme sağlanacak.
- Önce bir network yarat ve iletişim kurulacak containerları bu networklere connect yap.
- Örneğin webserver ve proxy containra exec ile erişmek gerekiyor
- $ docker container exec it webserver bash
- apt-get update && apt-get install iputils-ping kurulumlarını yap
- ping proxy //webserver containerdan proxy e erişimi kontrol ettik.
- docker container exec it webserver ping proxy // container içine girmeden ping atar ve roota geri döner.
- diğer container gir pingi kur ve webserver containerına eriş.
Not: Eğer makinalar bridge deyse birbirleri ile iletişim kuramazlar. illada brigde kullanacaksak
    $ docker network connect --help de --link list var. birbirleri arasında link kurmalısın. Ama önerilen
    ayrı bir network kurmaktır.

--yeni container ve aynı anda networke eklemek--
$ docker container run -d --name proxy --network my_net nginx
container listesi almak $ docker ps

--Dns Round Robin --
bir tür load balance kurgusudur....
amazon aliexpress gibi sitelerin kullandığı bir teknikdir
- yeni bir network oluştur. $ docker network create abc
- yeni container oluşturacağız. elastik 2 versiyonunu kuruyoruz.
    $ docker container run -d --network abc --network-alias search elasticsearch:2
- tekrar aynı komutu çalıştırıyoruz ve aynı network-alias isimli 2 adet elasticsearch containerimiz olacak
    $ docker container run -d --network abc --network-alias search elasticsearch:2
- aynı networkde üçüncü bir container oluşturuyoruz $ docker container run -it --network abc centos:7 bash
    Bu centos içinde curl default geliyor.
- centos bash içindeykey elastike bağlanmayı deniyoruz. [root@504379f3db6f /]# curl search:9200
- sürekli # curl search:9200 komutunu dene. Yukarıda bir oluşturduğumuz iki elastik makinesi arasında gidip geliyor. Cluster gibi oldu.

--Docker Hub kullanmak--Github benzeri bir sistem var--
kendi imajlarımızı ekleyebiliriz tag verebilir public yapabiliriz.
hub.docker.com
docker hub dan bakıp imajın istenilen version indirmek. $ docker pull nginx:1.15.9
tag lara göre indirebiliriz. örnek $ docker pull nginx:mainline
alpine tagları imajın en küçük boyutlu olanıdır. ör şu anki nginx 116 mb ama alpine sürümü 16 mb :)

--nginx imajı katmanları arasında ne değişim olmuş--
$ docker image history nginx:latest
$ docker image inspect httpd:latest //apache detaylar
$ docker image history httpd:latest

-- Kendi imagemizi yaratmak  ve huba göndermek --
$ docker image tag --help
$ docker image tag nginx:latest oncell/nginx
yada $ docker image tag oncell/nginx:latest oncell/nginx:01 //0.1 tagıyla hub da repomuzda görünecek.
$ docker login // zaten loginse gerek yok. işin bitince $ docker logout yapabiliriz.
$ docker push oncell/nginx

--docker file--
imaj oluşturmak için kullanılır.
$ docker build kullanacağız.
$ docker image build -t custom .

--Docker Volume--
-eğer container yada imajı güncellersek önceki veriler gider. Buna en güzel örnek
veritabanıdır. Veriler uçabilir. Veri kaybetmemek için bu tekniği kullanacağız.
mysql için hub.docker.com da volume açıklamalarını gözden geçir.
$ docker pull mysql    --mysql imajını indiriyoruz.
$ docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql
Containerlarımıza bakalım $ docker container ls
Container içine bakalım neler var. $ docker container inspect mysql
çıkan şemada Mounts tagına gel. destination ve source kısmındaki yola datayı mapliyebiliyoruz.
$ docker volume ls  Komutu ile oluşan volumeları görebiliyoruz. inspect deki mount tagındagi idyi burada bul.
$ docker volume inspect a7646522b3175e66258b58e76bf7fedfa287e495b14e6139c834a2e8b456b188  --detayları görürüz
Bu mysql containerı silsek bile veri kaybetmiyeceğiz docker volume ls ile bak volume duruyor.
Kendimiz bir volume ismi verebiliyoruz.
$ docker container run -d --name mysql2 -v mysql-db:/var/lib/mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
yeni bir mysql container oluştursak -v mysql-db:/var/lib/mysql kodu ile veri kaybetmeyiz.

--bind Mount--
Dockerfile
index.html
pwd parametresi bulunduğumuz klasör anlamında...
$ docker container run -d --name web -p 80:80 -v $(pwd):/usr/share/nginx/html nginx
container içine bağlanacağız $ docker container exec -it web bach
html içini değiştir. ve çalıştırıp web sayfasını yenile
--ödev--
$ docker container run -d --name mongo -v mongo-db:/data/db mongo
$ docker container ls
$ docker container rm -f mongo
$ docker container run -d --name mongo -v mongo-db:/data/db mongo:4.0
$ docker container inspect mongo
$ docker volume ls
$ docker volume prune --kullanılmayan volumeler silinir
$ docker container exec -it mongo bash
# mongo
> db.collection.inspectOne({text:'abc'})   --kayıt ekledik
> db.collection.find()  --kayda baktık
> exit --db den çıktık
# exit --mongo container dan çıktık
$ docker container rm -f mongo --mongonun bir üst version kuracağız bu yüzde siliyoruz.
$ docker container run -d --name mongo -v mongo-db:/data/db mongo:4.1  --4.0 dan 4.1 e güncelliyoruz.

--DOCKER COMPOSE--
containerlar arası konfigürasyon yapmak için kullanacağız.
iki ana komutu var.
* docker-compose up  --Tüm network,volume,containerları ayağı kaldırır.
* docker-compose down -- Herşeyi durdup siler.

docker-compose.yml şu an 3.1 sürümü var.
        template.yml dosyası içi aşağıdaki gibi 
            verison: '3.1' 
            services: #container adı
                servicename: # --name
                    image: # image
                    command: # opt çalıştırmak istediğimiz komutları yazıyoruz
                    environment: # Opt -e
                    volumes: # opt, -v
                    ports: # opt, -p
                servicename2:

                servicename3:
            volumes: # Optional, docker volume create
            network: # Optional, docker network create
basit bir Örnek:

version: '3.1'
#docker container run --name expresstest -p 80:80 -v $(pwd):/src oncell/expresstest
services:
    test:
        image: oncell/expresstest
        volumes:
            -.:/src
        ports:
            - '80:80'

-------Docker Swarm-----------
http://devnot.com/2017/docker-swarm-mode-ozellikleri-mimarisi-ve-kullanimi/
docker swart aktif olup olmadığına bakmak
# docker info
swarm: inactive satırını gördük # docker swarm init komutu ile aktif ederiz.
swarmı kapatmak # docker swarm leave

--Docker servis oluşturmak--
alpine 5 mb linux :)
# docker service create alpine ping google.com
# docker service ls -- servis listesi
# docker service update sharp_lalande --replicas 5
# docker service ls
# docker service ps sharp_lalande
# docker container rm -f sharp_lalande.3.3jh4j3h43g54lj463434mhjh
# docker update --help bir çok ayar var. 
# docker service update --help  burada daha fazla ayar var.
                                servisin ne kadar cpu ram kullanacağı belirlenebilir.
                                hangi networkü kullanacağı ... vs vs..
--docker servisi uçurmak--
# docker service rm sharp_lalande
https://labs.play-with-docker.com/
https://docs.docker.com/machine/install-machine/
--Docker Machine --
varmı yokmu kontrol etmek # docker-machine version
# docker-machine create node1  -- küçük bir linux sürüm kuracak.
# docker-machine create node2
--docker machine bağlanmak--
# docker-machine ssh node1
# docker-machine env node1 -- ortam değişkenlerini bulmak
digitalocean da 10$ makina seçti altında 3 tane node oluşturdu.
--digitalocean da docker swart kurmak--
# docker swarm init --advertise-addr dış ip miz.
# docker node ls
digitalocean node2 ye gittik ve node1 deki #docker swarm init komutu ile aldğımız join kodunu alıp node2 ye yapıştırıyoruz.
node2 yi manager yapmak için # docker node update --role manager node2

docker swarm join-token worker
docker swarm join-token manager ile kodu alır ve diğer nodelardan birine yapıştırırız.

docker node ls ile diğer eklenen nodeları görebiliriz. Tüm bunları digitalocean nodeları üzerinden yaptık.
Bu node1 e servis ekliyoruz örnek olarak alpine linux servisi kuruyoruz.
# docker service create --replicas 3 alpine ping google.com
3 replicada 3 tane çalışan servis yaptık.
# docker service ls
# docker service ps servisin_adı
-----------------------------------
node1 # docker network create --driver overlay wordpress
node1 # docker service create --name mysql -e MYSQL_ROOT_PASSWORD=workpress 
                                           -e MYSQL_DATABASE=wordpress 
                                           -e MYSQL_USER=wordpress 
                                           -e MYSQL_PASSWORD=wordpress --network wordpress mysql
node1 # docker service create --name wordpress --network wordpress -p 80:80 wordpress
browserdan node1 ipsini browsera yazarak test et.
3 node ip sinden de aynı servise girilebilir. Bunu swarm yönetiyor.
--Routing Mesh--
nodeları yönetiyor. Bir nevi load balance yapıyor. Erişilemeyen servisleri yeniden başlatıyor.
servislerden gelen paketleri uygun tasklara yönlendiriyor.
                service(10.0.9.2)
                   |
 ------------------------------------           
 |                |                 |
 node1          node2              node3   
(10.0.9.3)    (10.0.9.4)          (10.0.9.5)
örnek
# docker service create --name search -p 80:9200 --replicas 3 elasticsearch:2
verify: service converged dedi.
# docker service ls //komutu ile servisleri kontrol ediyoruz.
Bende memory hatası verdi :)
# docker service ps search
istek atıyoruz. # curl localhost //her seferinde başka node dan geliyor. Bu daha gerçek loadbalance işlemidir.
# free -m
# docker stats
# service docker status
--Ödev--
mimaride -- nodejs backend, react frontend, mongodb veritabanı.2 network olacak,1.frontend 2.backend için.
bir nodejs server oluştur 3000 porttan hizmet versin. get post olsun. 
bir react projesi oluştur.nodejs'e bağlansın ve 8080 den hizmet versin.
https://github.com/buraka/udemy-docker/tree/master/docker-swarm-odev1/voting-app-client
digitalocean daki node1'e ssh ile bağlanıyoruz. nodejs ve react uygulamalarını dockerfile ile build edip hub'a atacağız.
node1# docker image -t onsel/voteclient ./voteclient
node1# docker push onsel/voteclient  // docker huba gönderiyoruz.
aynı şekilde serverıda yap....
2 adet network oluşturacağız.
node1# docker network ls //netlere baktık
node1# docker network create --driver overlay backend
node1# docker network create --driver overlay frontend
mongoyu oluşturacağız
node1# docker service create --name mongo-db -e MONGO_INITDB_USERNAME=mongoadmin 
                                             -e MONGO_INITDB_ROOT_PASSWORD=secret 
                                             -e MONGO_INITDB_DATABASE=vote mongo 
node1# docker service ls //servisi kontol ettik.
servise network eklemeyi unuttuk servisi update ederek ekleyeceğim
node1# docker service update --network-add backend mongo-db
node1# docker service create --name voteserver -p 8080:3000 --network backend --network frontand onsel/voteserver
node1# docker service create --name voteclient -p 3000:3000 --network frontend onsel/voteclient
node1# docker service logs voteclient

-yukarıda yaptığımızı docker-compose.yml dosyası ile servisimizi oluşturacağız.-
version: '3.1'

services:
    mongo-db:
        image:mongo
        environment:
            MONGO_INITDB_ROOT_USERNAME: mongoadmin
            MONGO_INITDB_ROOT_PASSWORD: secret
            MONGO_INITDB_DATABASE: vote
        networks:
            - backend
    voteserver:
        build: ./voteserver
        image. onsel/voipserver
        ports:
            - 8080:3000
        networks:
            - backend
            - frontend
        depends_on:
            - mongo-db
    voteclient:
        build: ./voipclient
        image: onsel/voteonsel
        ports:
            - 3000:3000
        networks:
            - frontend

networks:
    backend:
    frontend:

# docker-compose up ile sistemi ayağı kaldırıyoruz.--- finished

-----Docker Stacks-----
ürünü canlı ortama almak için kullanılır.Yaml dosyası kullanabiliriz.
# docker stack deploy
stack bütün objeleri yönetir.
node1# docker stack deploy -c docker-compose.yml visulizer
node1# docker stack ls
node1# docker stack ps visulizer //daha detaylı bilgi veriyor.
not: https://hub.docker.com/r/dockersamples/visualizer nodeların durumunu görsel olarak gösterir.
    docker-compose.yml dosyasındaki image de var.

örnek 2 yml dosyası aşağıdadır. voteapp-python, resultapp-nodejs, redis, db-postgresql, worker-.net
(vote-app) üzerinden verilen oyun, redis üzerinden bir worker aracılığı ile postgre veri tabanına yazılarak cevapların olduğu web uygulamasından (result-app) canlı olarak takip edildiğini görebilmekteyiz.
https://github.com/buraka/udemy-docker/tree/master/docker-swarm-stack-sample2
https://medium.com/devopsturkiye/docker-%C3%BCzerine-genel-bak%C4%B1%C5%9F-docker-stack-kullan%C4%B1m%C4%B1-ff8f04115ec7

--swarm secrets--
gizli tutmak istediğimiz bilgiler(şifre,ssh key,username)
mongousername.txt dosyası oluştur içini doldur kaydet.
mongopassword.txt dosyası oluştur içine şifreni gir kaydet.
# docker secret // komutları gördük
# docker secret create mongo-user mongousername.txt //secret yarattık.
# docker secret create mongo-pass mongopassword.txt //secret yarattık.
# docker secret ls // secretları görmek için.
# docker sercret inspect mongo-user //detaları görebiliriz.
servis içinde secretlarımızı kullanacağız.
docker service --name mongo --secret mongo-user --secret mongo-pass 
        -e MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongo-user
        -e MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo-pass
        -p 27017:27017 mongo
mongoya bağlanmak için compass uygulamasını kullanıyoruz.
dosya oluşturmadan secret oluşturmak
# echo "onsel" | docker secret create mongo-user -
ödev
https://github.com/buraka/udemy-docker/tree/master/docker-compose-odev1

# watch docker service ls //ile servisler anlık izlenebilir.
ayağı kalkmayan servisleri görmek
# docker service ps servisadi
neden up olmadı Loglara bakacağız
# docker service logs servisadi
----docker lifecycle sample--------------
https://github.com/buraka/udemy-docker/tree/master/docker-lifecycle-sample1

--Docker Healthchecks--
exit 0: Sorun yok
exit 1: sorun var
3 durum var; Starting, Healthy(hatasız), Unhealtht(hata var)
# docker container run --name es -d --health-cmd "curl -f localhost:9200 || exit 1" 
        --health-interval 3s
        --health-timeout 5s elasticsearch:2
# docker container ls
# docker container inspect es //en üstte healt tagına odaklan.

